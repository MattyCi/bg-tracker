package org.bgtrack.auth;import com.opensymphony.xwork2.ActionSupport;import java.security.SecureRandom;import java.util.Base64;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.bgtrack.models.user.Reguser;import org.bgtrack.utils.BGTConstants;public class ShiroBaseAction extends ActionSupport {	private static final long serialVersionUID = 6529231995619283129L;		private static final Logger LOG = LogManager.getLogger(ShiroBaseAction.class);		protected transient Subject shiroUser;	protected Reguser regUser;		protected boolean isAuthenticationRequired = true;		private String popupMessage;		private String csrfToken;		private Boolean isCsrfProtected = false;		@Override	public void validate() {				if (isAuthenticationRequired() && !isAuthenticated()) {						addActionError(BGTConstants.LOG_IN_PROMPT);						throw new AuthenticationException("User must be logged in to perform action: " + this.getClass() );					}				if (isCsrfProtected() && isCsrfDetected()) {						addActionError("CSRF request detected. Please log in again.");						LOG.info("CSRF attempt detected for user " + shiroUser.getPrincipal() + " requesting action: " + this.getClass().getName());					}			}		public String generateCSRFToken() {				SecureRandom sr = null;		byte[] random = new byte[64];		String digest = null;				try {			sr = SecureRandom.getInstance("SHA1PRNG");						sr.nextBytes(random);						digest = Base64.getEncoder().encodeToString(random);					} catch (Exception e) {						LOG.error("Unable to create CSRF token for user: " + shiroUser.getPrincipal(), e);					}		this.setCsrfToken(digest);				return digest;	}		private boolean isCsrfDetected() {				Session session = this.shiroUser.getSession();				String validCsrfToken = (String) session.getAttribute("csrfToken");				LOG.debug("validating csrf token for user: " + shiroUser.getPrincipal());		LOG.debug("csrf token from request: " + validCsrfToken);		LOG.debug("validCsrfToken: " + validCsrfToken);				if (validCsrfToken != null && this.csrfToken != null && validCsrfToken.equals(this.csrfToken) )			return false;						return true;	}		public boolean isAuthenticated() {		return (this.shiroUser != null) && (this.shiroUser.isAuthenticated());	}		public boolean isExecutingUserPermitted(String permissionQuery) {				if ( this.getShiroUser().isPermitted(permissionQuery) ) {		    return true;		}				return false;			}	public Subject getShiroUser() {		return this.shiroUser;	}	public void setShiroUser(Subject shiroUser) {		this.shiroUser = shiroUser;	}		// used by the interceptor	public void setRegUser(Reguser regUser) {		this.regUser = regUser;	}		public Reguser getRegUser() {		return regUser;	}		public boolean isAuthenticationRequired() {		return isAuthenticationRequired;	}		public void setIsAuthenticationRequired(Boolean isAuthenticationRequired) {		 this.isAuthenticationRequired = isAuthenticationRequired;	}	public String getPopupMessage() {		return popupMessage;	}	public void setPopupMessage(String popupMessage) {		this.popupMessage = popupMessage;	}	public String getCsrfToken() {		return csrfToken;	}	public void setCsrfToken(String csrfToken) {		this.csrfToken = csrfToken;	}	public Boolean isCsrfProtected() {		return isCsrfProtected;	}	public void setIsCsrfProtected(Boolean isCsrfProtected) {		this.isCsrfProtected = isCsrfProtected;	}	}