package org.bgtrack.interceptor;import com.opensymphony.xwork2.ActionInvocation;import com.opensymphony.xwork2.interceptor.Interceptor;import org.apache.shiro.SecurityUtils;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.apache.struts2.StrutsException;import org.bgtrack.auth.BGTrackRealm;import org.bgtrack.auth.ShiroBaseAction;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * Inserts the current Shiro user into the value stack so that it can be * injected into Struts 2 actions should they have a JavaBeans setter * <code>setShiroUser(org.apache.shiro.subject.Subject shiroUser)</code>. */public class ShiroUserInterceptor implements Interceptor {	private static final long serialVersionUID = 1L;	private static final Logger LOG = LoggerFactory.getLogger(BGTrackRealm.class);		private static final String ACTION_NOT_SHIRO_BASE_ACTION_INSTANCE = "Action is not an instance of " + ShiroBaseAction.class.getName();		public void destroy() {	}	public void init() {	}	public String intercept (ActionInvocation actionInvocation) throws Exception {						if (!(actionInvocation.getAction() instanceof ShiroBaseAction)) {			LOG.error(ACTION_NOT_SHIRO_BASE_ACTION_INSTANCE);						throw new StrutsException(ACTION_NOT_SHIRO_BASE_ACTION_INSTANCE);				}				Subject shiroUser = SecurityUtils.getSubject();		actionInvocation.getStack().setValue("shiroUser", shiroUser);				String result = actionInvocation.invoke();				resetValidCSRFTokenToAction(actionInvocation, shiroUser);				return result;	}	private void resetValidCSRFTokenToAction(ActionInvocation actionInvocation, Subject shiroUser) {				ShiroBaseAction actionInstance = (ShiroBaseAction) actionInvocation.getAction();				String sessionCsrfToken = getSubjectsCSRFToken(shiroUser);				LOG.debug("resetting csrf token for use on JSP layer...");				LOG.debug("sessionCsrfToken for user "+ shiroUser.getPrincipal() +" is:" + sessionCsrfToken);				actionInstance.setCsrfToken(sessionCsrfToken);			}	private String getSubjectsCSRFToken(Subject shiroUser) {				Session session = shiroUser.getSession();				return (String) session.getAttribute("csrfToken");			}	}